- Requirements
  - Multiple roles
    - User
    - Admin
  - List all books
  - Filter books by
    - Title
    - Author
    - Genre
  - View detailed information about a certain book
    - Title
    - Description
    - Author
    - Genre
  - Add book (put as available for lending)
  - Remove book (stop lending)
  - Send a borrow request
  - List borrow requests other users sent to me
  - Accept a borrow request from another user
  - Reject a borrow request from another user
  - List borrow requests I sent
  - Send a message to lender or borrower
    - There must be a book that is currently borrowed from the lender to the borrower
  - List messages to/from a user
  - As an admin, view the status of the library:
    - Current borrowed books
    - Current available (non-borrowed) books
    - Number of accepted/rejected/pending requests

- Assumptions
  - Requests/responses happen interactively between the client and the server (not in an RMI-like manner)
    - The server is responsible for driving the communication
  - User gets to choose account type on registration
  - Description is needed to differentiate book listing view from detailed view
  - Borrowing a book hides it from the bookstore
    - Returning it unhides it
    - Pending borrow requests are left as they are
  - Chatting between lender and borrower is not real-time
    - A lender can chat with a borrower if there is an accepted borrow request between them
  - The admin statistics are numbers not listings (hence the term "statistics")
  - "ACCEPTED" borrow request status is split into "BORROWED" and "RETURNED"
  - "browse through the bookstore's catalog" means list all available books for borrowing
    - A book that is already borrowed is not available for borrowing
    - A book that is uploaded by the browsing user is not available for borrowing
    - A book that the browsing user already sent a borrow request for is not available for borrowing

- Extra points
  - Graceful exiting
    - Client also handles server close
  - try-with-resources to auto-close resources
  - Validations everywhere
  - Real-time chat

- Maybe and maybe not problems
  - Abstraction for menu choices
  - Abstraction for question/answer that allows for going back
  - Abstraction for selectAll, selectOne, insert, update, ...
  - DB enums as constants in code
  - Hide repeated parameters as class members
  - More fine-grained requests listing to avoid validation before operations on requests
  - Encapsulate chatConnection concurrent hashmap
